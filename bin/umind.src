「unidecode.src」を　コンパイル。

コンパイル元ファイルは　ファイル。
コンパイル先ファイルは　ファイル。
複写ファイルは　ファイル。
複写ファイル名は　文字列定数　「temp.dat」。
変換パスは　文字列実体　長さ　２００バイト。
ソースコード名は　文字列実体　長さ　２００バイト。
コンパイル先ファイル名は　文字列実体　長さ　２００バイト。
コンパイル元ファイル名は　文字列実体　長さ　２００バイト。

エラー処理とは
	エラー？　ならば　
		エラー文字列で　重大エラーにし、
	つぎに。

（ファイル名・ソースコード無視？ー＞・）
※再帰
指定ソースコード変換とは
	ソースコード無視フラグは　ワード変数

	コンパイル元ファイル名と
	ソースコード無視フラグに　入れ

	ソースコード無視フラグが　真？　ならば
		コンパイル元ファイル名が　ソースコード名と　等しい文字列　ならば
			終わり
		つぎに
	つぎに

	コンパイル元ファイル名の　パス名を得て　コンパイル先ファイル名に　入れ、
	コンパイル先ファイル名に　「\s」を　追加し
	コンパイル元ファイル名の　純ファイル名を得て　コンパイル先ファイル名に　追加し　	

	コンパイル先ファイル名から　４文字だけ　右側取り出し　「.src」に　等しい文字列　でなければ
		終わり
	つぎに

	複写ファイルに　コンパイル先ファイル名を　一行書き込み
	エラー処理し

	コンパイル元ファイル名で　コンパイル元ファイルを　オープンし、エラー処理し、
	コンパイル先ファイル名で　コンパイル先ファイルを　新規オープンし、　エラー処理し、
	ここから
		コンパイル元ファイルから　一行読み出し
		データ終り？　ならば
			捨て
			打ち切り
		つぎに
		ＵＴＦ８→ＳＪＩＳ変換して
		コンパイル先ファイルに　一行書き込み
		エラー処理し、
	繰り返し
	コンパイル元ファイルを　クローズし
	コンパイル先ファイルを　クローズし。

（ファイル名ー＞・）
※再帰
指定フォルダのソースコード変換とは
    フォルダ名は　文字列
    使用タイムスタンプは　構造体　タイムスタンプ型

	フォルダ名に　入れ

    フォルダ名と　使用タイムスタンプで　最初のファイル検索し　偽？　ならば
        終わり
    つぎに

    ここから
        使用タイムスタンプの　発見ファイル名をつみ
        使用タイムスタンプが  ディレクトリ？　ならば
            「\*」を　合成し
            指定フォルダのソースコード変換し
        さもなければ
            真で　指定ソースコード変換し
        つぎに
        使用タイムスタンプで　次のファイル検索し　偽？　ならば
            終わり
        つぎに
    繰り返し。

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
※ＵＴＦ８で書かれたソースコード群をコンパイルします。　　　※
※使用方法　　　　　　　　　　　　　　　　　　　　　　　　　　 ※
※umind <utf8_file>										※
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※

メインとは
	起動引数個数が　ゼロ？　ならば
		「Usage: umind <file_name>」を　一行表示し　終わり
	つぎに
	Unicodeデコードテーブルを読み出しし、　偽？　ならば
		重大エラーにする
    つぎに

    カレントディレクトリと　「.\*」で　絶対パスと相対パスをマージし
    変換パスに　入れ
	
	カレントディレクトリと　起動引数（１個目）で　絶対パスと相対パスをマージし
	ソースコード名に　入れ

	複写ファイル名で　複写ファイルを　新規オープンし
	エラー処理し

    変換パスで　指定フォルダのソースコード変換し

	ソースコード名と　偽とで　指定ソースコード変換し

	「mind 」と　コンパイル先ファイル名を　合成し、「 file」も　合成し、
	プログラム実行して	偽？　ならば
		エラー表示し
		重大エラー
	つぎに

	複写ファイルを　クローズし

	複写ファイルを　再オープンし

	エラー処理し
	ここから
		複写ファイルより　一行読み出し
		データ終わり？　ならば　捨て　打ち切り　つぎに
		ファイル削除し
		エラー処理し
	繰り返し

	複写ファイルを　クローズし
	複写ファイル名を　ファイル削除し
	エラー処理し

	※コンパイル先の「.exe」ファイルを「s」がつかないものにリネームする。
	コンパイル先ファイル名の　主ファイル名を得て　「.exe」を　合成したものをつんでおき
	ソースコード名の　主ファイル名を得て　「.exe」を　合成したものを

	複写し　ファイル有り？　ならば
		複写し　ファイル削除し
	つぎに

	ファイル名変更し

	エラー処理し

	コンパイル先ファイル名の　主ファイル名を得て　「.mco」を　合成したものを
	ソースコード名の　主ファイル名を得て　「.mco」を　合成したものに
	
	複写し　ファイル有り？　ならば
		複写し　ファイル削除し
	つぎに
	ファイル名変更し

	エラー処理し
	「終了時」で　このメッセージでスタック検査。